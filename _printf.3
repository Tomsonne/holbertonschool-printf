.TH _PRINTF 3 "Mars 2025" "Bibliothèque Personnalisée" "Manuel Utilisateur"
.SH NOM
_printf \- Implémentation personnalisée de la fonction printf

.SH SYNOPSIS
.B #include "votre_fichier.h"
.br
.B int _printf(const char *format, ...);

.SH DESCRIPTION
.B _printf()
affiche une sortie formatée sur la sortie standard, de manière similaire à la fonction printf standard.

Les spécificateurs de format pris en charge sont :
.TP
.B %%
Affiche un '%'.
.TP
.B %c
Affiche un seul caractère.
.TP
.B %s
Affiche une chaîne de caractères.
.TP
.B %d, %i
Affiche un entier.

La fonction analyse la chaîne de format et appelle les fonctions auxiliaires appropriées en fonction du spécificateur.

.SH PARAMÈTRES
.TP
.B format
Une chaîne de caractères terminée par '\0' contenant du texte et des spécificateurs de format.
.TP
.B ... (arguments variadiques)
Un nombre variable d'arguments à formater et afficher.

.SH VALEUR DE RETOUR
.B _printf()
retourne le nombre de caractères imprimés (hors '\0'), ou -1 en cas d'erreur.

.SH FONCTIONS UTILISÉES
.TP
.B int print_char(va_list args)
Gère le spécificateur '%c'.
.TP
.B int print_string(va_list args)
Gère le spécificateur '%s'.
.TP
.B int print_int(int num)
Gère la conversion et l'affichage des entiers.
.TP
.B void recursion_print_int(int num)
Fonction auxiliaire pour afficher les entiers récursivement.
.TP
.B int _write(char c)
Fonction bas niveau pour écrire un seul caractère sur stdout.

.SH STRUCTURE
.TP
.B typedef struct format_types
Associe les spécificateurs de format aux fonctions correspondantes :
.nf
    typedef struct format_types {
        char *format;
        void (*f)(va_list args);
    } form;
.fi

.SH EXEMPLES
.B Exemple d'utilisation :
.nf
    _printf("Bonjour %s ! Votre score est de %d.\n", "Alice", 42);
.fi
Sortie :
.nf
    Bonjour Alice ! Votre score est de 42.
.fi

.SH REMARQUES
- Cette fonction ne prend pas en charge toutes les fonctionnalités de printf standard.
- L'implémentation ne gère pas les nombres à virgule flottante ni le formatage personnalisé de largeur/précision.

.SH BUGS
- La gestion des erreurs est actuellement limitée.
- Ne prend pas en charge l'optimisation par gestion de buffer.

.SH VOIR AUSSI
.B printf(3), write(2)

.SH AUTEUR
Écrit par Shakib ROJAS et Thomas ROUSSEAU


